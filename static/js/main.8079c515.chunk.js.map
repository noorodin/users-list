{"version":3,"sources":["components/UserInfo/UserInfo.js","context.js","containers/User/User.js","containers/Users/Users.js","App.js","serviceWorker.js","index.js"],"names":["UserInfo","user","className","src","avatar","alt","first_name","last_name","email","UsersContext","React","createContext","users","updateUsersList","User","props","id","useParams","usersContext","useContext","useState","loading","setLoading","setUser","useEffect","length","getUser","find","fetch","then","res","json","console","log","data","err","to","Users","getUsersList","page","per_page","map","i","key","App","setUsers","Provider","value","exact","from","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8079c515.chunk.js","sourcesContent":["import React from 'react';\r\nimport './UserInfo.css';\r\n\r\nfunction UserInfo({ user }) {\r\n  return (\r\n    <>\r\n      {\r\n        user ?\r\n          <article className=\"user\">\r\n            < img className=\"avatar\" src={user.avatar} alt={user.first_name} ></img >\r\n            <div className=\"user-name\">\r\n              <span className=\"first-name\">{user.first_name}</span>\r\n              <span>{user.last_name}</span>\r\n            </div>\r\n            <span>{user.email}</span>\r\n          </article >\r\n          :\r\n          <h1>USER NOT FOUND!</h1>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UserInfo;\r\n","import React from \"react\";\r\nconst UsersContext = React.createContext({\r\n    users: [],\r\n    updateUsersList: () => { }\r\n});\r\n\r\nexport { UsersContext };","import React, { useContext } from 'react';\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport UserInfo from '../../components/UserInfo/UserInfo';\r\nimport { UsersContext } from '../../context';\r\nimport './User.css';\r\n\r\nfunction User(props) {\r\n  let { id } = useParams();\r\n  const usersContext = useContext(UsersContext);\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [user, setUser] = React.useState([]);\r\n\r\n  React.useEffect(() => {\r\n    let users = usersContext.users;\r\n\r\n    if (users.length === 0) {\r\n      getUser(id);\r\n    } else {\r\n      let user = users.find(user => user.id == id)\r\n\r\n      if (user) {\r\n        setUser(user);\r\n      } else {\r\n        getUser(id);\r\n      }\r\n\r\n    }\r\n  }, []);\r\n\r\n  const getUser = (id) => {\r\n    setLoading(true);\r\n\r\n    fetch(`https://reqres.in/api/users/${id}`)\r\n      .then(res => res.json())\r\n      .then(\r\n        (res) => {\r\n          console.log(\"response: \", res);\r\n          setUser(res.data);\r\n          setLoading(false);\r\n        },\r\n        (err) => {\r\n          console.log(\"error: \", err);\r\n          setLoading(false);\r\n        }\r\n      )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        loading ?\r\n          <div className=\"loading\">Loading ...</div>\r\n          :\r\n          <section className=\"content-wrapper\">\r\n            <Link to={`/users`}>Back to Users list</Link>\r\n            <UserInfo user={user} />\r\n          </section>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default User;\r\n","import React, { useContext } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport UserInfo from '../../components/UserInfo/UserInfo';\r\nimport { UsersContext } from '../../context';\r\nimport './Users.css';\r\n\r\nfunction Users() {\r\n  const usersContext = useContext(UsersContext);\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    if (usersContext.users.length === 0) {\r\n      let apiParameters = {\r\n        \"page\": 1,\r\n        \"per_page\": 8,\r\n      };\r\n      getUsersList(apiParameters);\r\n    }\r\n  }, []);\r\n\r\n  const getUsersList = ({ page, per_page }) => {\r\n    setLoading(true);\r\n\r\n    fetch(`https://reqres.in/api/users?page=${page}&per_page=${per_page}`)\r\n      .then(res => res.json())\r\n      .then(\r\n        (res) => {\r\n          console.log(\"response: \", res);\r\n          usersContext.updateUsersList(res.data);\r\n          setLoading(false);\r\n        },\r\n        (err) => {\r\n          console.log(\"error: \", err);\r\n          setLoading(false);\r\n        }\r\n      )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        loading ?\r\n          <div className=\"loading\">Loading ...</div>\r\n          :\r\n          <section className=\"users-list-wrapper\">\r\n            {\r\n              usersContext.users && usersContext.users.map((user, i) => {\r\n                return <Link to={`/user/${user.id}`} key={user.id} className=\"user-wrapper\">\r\n                  <UserInfo user={user} />\r\n                </Link>\r\n              })\r\n            }\r\n          </section>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Users;","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport User from './containers/User/User';\nimport Users from './containers/Users/Users';\nimport { UsersContext } from './context';\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n  \n  const updateUsersList = (users) => {\n    setUsers(users);\n  }\n  \n  return (\n    <UsersContext.Provider value={{ users: users , updateUsersList: updateUsersList }} >\n      <Router>\n        <div className=\"home-page\">\n          <Switch>\n            <Redirect exact from=\"/\" to=\"/users\" />\n            <Route path=\"/users\" component={Users} />\n            <Route path=\"/user/:id\" component={User} />\n          </Switch>\n        </div>\n      </Router>\n    </UsersContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}